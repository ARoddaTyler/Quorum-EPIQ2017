use Libraries.Game.Game
use Libraries.Sound.Audio
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Collision.Shapes.Circle
use Libraries.Interface.Events.CollisionListener3D
/*
    This is a default class for creating a game in Quorum. Note that the Main 
    action begins by calling StartGame(), which loads a window a game can 
    be displayed in. The action CreateGame is where the game should load any 
    assets, like images to be displayed, frames of animation, or sounds to be
    played. 
*/
class Main is Game, CollisionListener3D

    Drawable box
    Drawable box2
    Drawable cliff
    Drawable floor
    Drawable top
    Audio plop
    Audio splat
    Circle circle
//Variables for mass are declared outside the actions, so they can be used in all needed actions.
    number mass1 = 0
    number mass2 = 0
    /*
        This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */
    action Main

//Input statements are before the StartGame actions, so the mass of each object can be chosen.
        mass1 = cast(number, input("What is the mass of the first object?"))
        mass2 = cast(number, input("What is the mass of the second object?"))
        StartGame()
    end

    /*
        This action sets up the default values for a game. For example, we might
        use the Libraries.Game.Graphics.Drawable class to load up an image or 
        a shape. Or, we might add a Libraries.Interface.Button for making something clickable
        or a Libraries.Interface.TextBox for gathering user input in a game.
    */
    action CreateGame

//These sounds are loaded by the student, but used in code that is given in the template.
        plop:Load("smallPlop.wav")
        splat:Load("splat.wav")

//Students are given this code in two examples
        EnablePhysics2D(true)
        SetGravity2D(0, -10)

//This code loads the ceiling of the room. It is given to the student in an example
       top:LoadFilledRectangle(GetScreenWidth(), 700)
       top:SetPosition(0, GetScreenHeight()- 6)
       top:EnablePhysics(true)
       top:SetUnmovable()
       Add(top)

//This code loads the floor of the room. The student creates the code, using the ceiling code as an example.
       floor:LoadFilledRectangle(GetScreenWidth(), 700)
       floor:SetPosition(0, -696)
       floor:EnablePhysics(true)
       floor:SetFriction(0.1)
       floor:SetUnmovable()
       Add(floor)

//This code loads the cliff that dropped objects will interact with. The first part is given to the student.
       cliff:Load("BrickWall.png")
       cliff:SetPosition((GetScreenWidth() - 150) / 2, 0)
//The student is asked to add this part in an activity.
       cliff:EnablePhysics(true)
       cliff:SetFriction(0.1)
       Add(cliff)
        
//This is the first object. This code is mostly given to the student in an example.
        box:Load("Lightning.png")
        box:EnablePhysics(true)
        circle:SetRadius(30)
        box:SetShape(circle)
        box:SetFriction(0.1)
        box:SetPosition(((GetScreenWidth() - 60) / 2) - 77, 450)
        box:SetResponsive()
        box:SetRestitution(0.5)
        box:SetMass(mass1)
        box:SetFriction(0.1)
        Add(box)

//This is the second object. Students provide all this code, using the first object as an example.
        box2:Load("Cork.png")
        box2:EnablePhysics(true)
        box2:SetShape(circle)
        box2:SetPosition(((GetScreenWidth() - 60) / 2) + 77, 450)
        box2:SetResponsive()
        box2:SetRestitution(0.5)
        box2:SetMass(mass2)
        box2:SetFriction(0.01)
        Add(box2)
        





    end

    /*
        The update action is called on every "frame" of animation in a game. This
        action should be used to do operations on items. So, for example, we 
        might use this action to change frames of animation, to rotate items, 
        or to make creatures jump.
    */
    action Update(number seconds)
        
    end
    
    action BeginCollision()
    end
end